随着数据量的增加，索引树深度增加，从而引起查询效率逐渐下降，对于MySQL而言，一般测试数据显示，单表数据量在2kw后，查询效率将快速下降。在这种情况下，本文讨论如下解决办法：
1、选取表中递增id字段并在其上建立索引，用id > #{limit}的查询方式替换原生分页语句limit #{start},#{limit}
2、在表中预设一个状态标记字段status，对扫描过的记录设置status字段=1，在扫描语句中添加status = 0 语句，从而减少扫描区间的数据量
3、根据扫描sql选取区间字段，将完整的扫描区间划分成多个微区间，采用顺序或并发执行的方式处理微区间的扫描任务，最后汇总处理结果返回给调用方
如下是工作中的一个例子：

背景：
在业务初期，处理预估为500w的结算单数据。选型MySQL，不分库分表直接存储，字段上预设值update_time,status子单，业务字段bill_time，自增主键id。系统上线3个月后，数据远超预期达到5kw+，
使用PageHelper分页插件简单分页，在业务扫描处理数据时出现较多的慢sql，执行sql简单示意如下：
select * from t where bill_time>= #{startTime} and bill_time<=#{endTime}

分析：
查询慢的原因主要有2个：
① 单表数据量本身比较大，索引效率难以满足业务诉求
② PageHelper分页插件通过拦截注入分页语句实现分页，首先对原sql包裹 select(0) from (select * from t where bill_time>= #{startTime} and bill_time<=#{endTime})拿到总数据量，
其次注入limit #{start},#{limit}的方式实现分页，在大数据量的情况下，这2次查询均是耗时操作，容易引起查询超时。在笔者工作中，其实并不需要提前知道总数据量，只需要将该部分数据扫描一遍逐个处理

解决：
① 对查询sql进行逻辑拆分，按照bill_time的时间区间切分查询任务
